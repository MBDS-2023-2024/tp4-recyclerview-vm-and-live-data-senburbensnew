package org.mbds.unice.github.data.api

import org.mbds.unice.github.data.model.User

class FakeApiService : ApiService {
    private val _users = FakeApiServiceGenerator.FAKE_USERS

    /**
     * Return a list of [User]
     * Those users must be generated by [FakeApiServiceGenerator]
     */
    override fun getUsers(): List<User> {
        return _users
    }

    /**
     * Generate a random [User] and add it [FakeApiService.users] list.
     * This user must be get from the [FakeApiServiceGenerator.FAKE_USERS_RANDOM] list.
     */
    override fun addRandomUser() {
        val randomUsers = FakeApiServiceGenerator.FAKE_USERS_RANDOM
        if (randomUsers.isNotEmpty()) {
            val randomUser = randomUsers.random()
            _users.add(randomUser)
        }
    }

    /**
     * Delete a [User] from the [FakeApiService.users] list.
     */
    override fun deleteUser(username: User) {
        val userToUpdate = _users.find { it.login == username.login }
        userToUpdate?.let {
            it.active = !it.active
        }
    }

    override fun sortUsersByName(ascending: Boolean) {
        val sortedList = if (ascending) {
            _users.sortedBy { it.login }
        } else {
            _users.sortedByDescending { it.login }
        }
        _users.clear()
        _users.addAll(sortedList)
    }

    override fun sortUsersByDate(ascending: Boolean) {
        val sortedList = if (ascending) {
            _users.sortedBy { it.creationDate }
        } else {
            _users.sortedByDescending { it.creationDate }
        }
        _users.clear()
        _users.addAll(sortedList)
    }

    override fun filterUsersByStatus(active: Boolean) {
        val sortedList = if (active) {
            _users.sortedBy { it.active }
        } else {
            _users.sortedByDescending { it.active }
        }
        _users.clear()
        _users.addAll(sortedList)
    }
}